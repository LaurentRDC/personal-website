<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Laurent's personal blog</title>
    <link href="https://laurentrdc.xyz/atom.xml" rel="self" />
    <link href="https://laurentrdc.xyz" />
    <id>https://laurentrdc.xyz/atom.xml</id>
    <author>
        <name>Laurent P. René de Cotret</name>
        <email>laurent.decotret@outlook.com</email>
    </author>
    <updated>2021-09-30</updated>
    <entry>
    <title>Can you make heterogeneous lists in Haskell? Sure — as long your intent is clear</title>
    <link href="https://laurentrdc.xyz//posts/existential.html" />
    <id>https://laurentrdc.xyz//posts/existential.html</id>
    <published>2021-09-26T00:00:00Z</published>
    <updated>2021-09-30</updated>
    <summary type="html"><![CDATA[<p><em>Featured in <a href="https://haskellweekly.news/issue/283.html">Haskell Weekly issue 283</a></em></p>
<p>Sometimes, Haskell’s type system seems a bit restrictive compared to dynamic languages like Python. The most obvious example is the heterogenous list:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="co"># Python</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> mylist <span class="op">=</span> [<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;world&quot;</span>, <span class="dv">117</span>, <span class="va">None</span>]</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> item <span class="kw">in</span> mylist:</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>...     <span class="bu">print</span>(item) </span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>hello</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>world</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dv">117</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">None</span></span></code></pre></div>
<p>but in Haskell, list items must be of the same type:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Haskell</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>mylist <span class="ot">=</span> [<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;world&quot;</span>, <span class="dv">117</span>, ()] <span class="co">-- Invalid: type cannot be inferred!</span></span></code></pre></div>
<p>This is a contrived example, of course. But consider this use-case: I just want to print the content of the list. It’s unfortunate I can’t write:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mylist ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>mylist <span class="ot">=</span>  [<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;world&quot;</span>, <span class="dv">117</span>, ()] <span class="co">-- All these types have Show instances, but this won&#39;t compile</span></span></code></pre></div>
<p>For this specific application, the type system is overly restrictive – as long as all I want to do is print the content of my list! In this post, I’ll show you how to do something like this using the <code>ExistentialQuantification</code> language extension.</p>
<h2 class="title is-2" id="a-more-complex-example">A more complex example</h2>
<p>Let’s say I want to list American football players. There are two broad classes of players (offensive and defensive) and we want to keep track of the players in a list – the player registry. Our final objective is to print the list of players to standard output.</p>
<p>Let’s try to do the same in Haskell. Our first reflex might be to use a sum type:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">OffensivePlayer</span> <span class="dt">String</span> <span class="dt">String</span> <span class="co">-- name and position</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">DefensivePlayer</span> <span class="dt">String</span> <span class="dt">String</span> <span class="co">-- name and position</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">playerRegistry ::</span> [<span class="dt">Player</span>]</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>However, not all sports stats apply to <code>OffensivePlayer</code> and <code>DefensivePlayer</code> constructors. For example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">passingAccuracy ::</span> <span class="dt">Player</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>passingAccuracy (<span class="dt">OffensivePlayer</span> name pos) <span class="ot">=</span> lookupFromDatabase <span class="st">&quot;passingAccuracy&quot;</span> name</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>passingAccuracy (<span class="dt">DefensivePlayer</span> name pos) <span class="ot">=</span> <span class="fu">return</span> <span class="dv">0</span> <span class="co">-- Defensive players don&#39;t pass</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="ot">tacklesPerGame ::</span> <span class="dt">Player</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>tacklesPerGame (<span class="dt">OffensivePlayer</span> name pos) <span class="ot">=</span> <span class="fu">return</span> <span class="dv">0</span> <span class="co">-- Offensive players don&#39;t tackle</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>tacklesPerGame (<span class="dt">DefensivePlayer</span> name pos) <span class="ot">=</span> lookupFromDatabase <span class="st">&quot;tacklesPerGame&quot;</span> name</span></code></pre></div>
<p>The <code>Player</code> type is too general; we’re not using the type system to its full potential. It’s much more representative of our situation to use two separate types:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">OffensivePlayer</span> <span class="ot">=</span> <span class="dt">OffensivePlayer</span> <span class="dt">String</span> <span class="dt">String</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">DefensivePlayer</span> <span class="ot">=</span> <span class="dt">DefensivePlayer</span> <span class="dt">String</span> <span class="dt">String</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">passingAccuracy ::</span> <span class="dt">OffensivePlayer</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>passingAccuracy <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ot">tacklesPerGame ::</span> <span class="dt">DefensivePlayer</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>tacklesPerGame <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>This is much safer and appropriate. Now let’s give ourselves the ability to print players:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">OffensivePlayer</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">OffensivePlayer</span> name pos) <span class="ot">=</span> <span class="fu">mconcat</span> [<span class="st">&quot;&lt; &quot;</span>, name, <span class="st">&quot; : &quot;</span>, pos, <span class="st">&quot; &gt;&quot;</span>]</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">DefensivePlayer</span> <span class="kw">where</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">DefensivePlayer</span> name pos) <span class="ot">=</span> <span class="fu">mconcat</span> [<span class="st">&quot;&lt; &quot;</span>, name, <span class="st">&quot; : &quot;</span>, pos, <span class="st">&quot; &gt;&quot;</span>]</span></code></pre></div>
<p>Awesome. One last problem:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- This won&#39;t typecheck</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> [ <span class="dt">OffensivePlayer</span> <span class="st">&quot;Tom Brady&quot;</span>       <span class="st">&quot;Quarterback&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>                  , <span class="dt">DefensivePlayer</span> <span class="st">&quot;Michael Strahan&quot;</span> <span class="st">&quot;Defensive end&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                  ]</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">printPlayerList ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>printPlayerList <span class="ot">=</span> forM_ playerRegistry <span class="fu">print</span> <span class="co">-- `forM_` from Control.Monad</span></span></code></pre></div>
<p>Rather annoying. We could wrap the two player types in a sum type:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">OP</span> <span class="dt">OffensivePlayer</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">DP</span> <span class="dt">DefensivePlayer</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Player</span> <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">OP</span> p) <span class="ot">=</span> <span class="fu">show</span> p</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">DP</span> p) <span class="ot">=</span> <span class="fu">show</span> p</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ot">playerRegistry ::</span> [<span class="dt">Player</span>]</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> [ <span class="dt">OP</span> (<span class="dt">OffensivePlayer</span> <span class="st">&quot;Tom Brady&quot;</span>       <span class="st">&quot;Quarterback&quot;</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>                 , <span class="dt">DP</span> (<span class="dt">DefensivePlayer</span> <span class="st">&quot;Michael Strahan&quot;</span> <span class="st">&quot;Defensive end&quot;</span>)</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>                 ]</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="ot">printPlayerList ::</span> <span class="dt">IO</span> ()</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>printPlayerList <span class="ot">=</span> forM_ playerRegistry <span class="fu">print</span>        </span></code></pre></div>
<p>but this is quite clunky. It also doesn’t scale well to cases where we have a lot more types!</p>
<h2 class="title is-2" id="enter-existential-quantification">Enter existential quantification</h2>
<p>The latest version of the Haskell language (Haskell 2010) is somewhat dated at this point. However, the Glasgow Haskell Compiler supports <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts.html">language extensions</a> at the cost of portability. Turns out that the <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/existential_quantification.html#existentially-quantified-data-constructors"><code>ExistentialQuantification</code></a> language extension can help us with this problem.</p>
<p>We turn on the extension at the top of our module:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE ExistentialQuantification #-}</span></span></code></pre></div>
<p>and create an existential datatype:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ShowPlayer</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Show</span> a</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>                <span class="ot">=&gt;</span> <span class="dt">ShowPlayer</span> a</span></code></pre></div>
<p>The datatype <code>ShowPlayer</code> is a real datatype that bundles any data <code>a</code> which can be shown. Note that <strong>everything else</strong> about the internal type is forgotten, since the <code>ShowPlayer</code> type wraps <strong>any</strong> type that can be shown (that’s what <code>forall a. Show a</code> means).</p>
<p>We can facilitate the construction of a <code>Player</code> with the following helper function:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mkPlayer ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ShowPlayer</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>mkPlayer a <span class="ot">=</span> <span class="dt">ShowPlayer</span> a <span class="fu">show</span> </span></code></pre></div>
<p>Now since the data bundled in a <code>ShowPlayer</code> can be shown, the only operation supported by <code>ShowPlayer</code> is <code>Show</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">ShowPlayer</span> <span class="kw">where</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">ShowPlayer</span> a) <span class="ot">=</span> <span class="fu">show</span> a</span></code></pre></div>
<p>Finally, our heterogenous list:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">playerRegistry ::</span> [<span class="dt">ShowPlayer</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> [ <span class="co">-- ✓ OffensivePlayer has a Show instance ✓</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                   <span class="dt">ShowPlayer</span> (<span class="dt">OffensivePlayer</span> <span class="st">&quot;Tom Brady&quot;</span>       <span class="st">&quot;Quarterback&quot;</span>))</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>                   <span class="co">-- ✓ DefensivePlayer has a Show instance ✓</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>                 , <span class="dt">ShowPlayer</span> (<span class="dt">DefensivePlayer</span> <span class="st">&quot;Michael Strahan&quot;</span> <span class="st">&quot;Defensive end&quot;</span>))</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>                 ]</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ot">printPlayerList ::</span> <span class="dt">IO</span> ()</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>printPlayerList <span class="ot">=</span> forM_ playerRegistry <span class="fu">print</span> </span></code></pre></div>
<p>So we <em>can</em> have an heterogenous list – as long as the only thing we can do with it is show it!</p>
<p>The advantage here compared to the sum-type approach is when we extend our code to many more types:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Quarterback</span>    <span class="ot">=</span> <span class="dt">Quarterback</span>  <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Lineman</span>        <span class="ot">=</span> <span class="dt">Lineman</span>      <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Runningback</span>    <span class="ot">=</span> <span class="dt">Runningback</span>  <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">WideReceiver</span>   <span class="ot">=</span> <span class="dt">WideReceiver</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">DefensiveEnd</span>   <span class="ot">=</span> <span class="dt">DefensiveEnd</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Linebacker</span>     <span class="ot">=</span> <span class="dt">Linebacker</span>   <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Safety</span>         <span class="ot">=</span> <span class="dt">Safety</span>       <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Corner</span>         <span class="ot">=</span> <span class="dt">Corner</span>       <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Example: some functions are specific to certain positions</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="ot">passingAccuracy ::</span> <span class="dt">Quarterback</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>assingAccuracy <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a><span class="ot">playerRegistry ::</span> [<span class="dt">ShowPlayer</span>]</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> [ mkPlayer (<span class="dt">Quarterback</span>  <span class="st">&quot;Tom Brady&quot;</span>))</span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>                 , mkPlayer (<span class="dt">DefensiveEnd</span> <span class="st">&quot;Michael Strahan&quot;</span>))</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>                 , mkPlayer (<span class="dt">Safety</span>       <span class="st">&quot;Richard Sherman&quot;</span>))</span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>                 , <span class="op">...</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>                 ]</span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="ot">printPlayerList ::</span> <span class="dt">IO</span> ()</span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>printPlayerList <span class="ot">=</span> forM_ playerRegistry <span class="fu">print</span> </span></code></pre></div>
<p>This way, we can keep the benefits of the type system when we want it, but also give ourselves some flexibility when we need it. This is actually similar to object-oriented programming, where classes bundle data and operations on them into an <strong>object</strong>!</p>
<h2 class="title is-2" id="a-bit-more-functionality">A bit more functionality</h2>
<p>Let’s pack in more operations on our heterogenous list. We might want to not only show players, but also access their salaries. We describe the functionality common to all players in a typeclass called <code>BasePlayer</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Show</span> p <span class="ot">=&gt;</span> <span class="dt">BasePlayer</span> p <span class="kw">where</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Operate in IO because of database access, for example</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    getYearlySalary ::</span> p <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">BasePlayer</span> <span class="dt">Quarterback</span> <span class="kw">where</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">BasePlayer</span> <span class="dt">Lineman</span> <span class="kw">where</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span></code></pre></div>
<p>We can update our player registry to support the same operations as <code>BasePlayer</code> through the <code>Player</code> existential type:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">BasePlayer</span> a</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>            <span class="ot">=&gt;</span> <span class="dt">Player</span> a</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Player</span> <span class="kw">where</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">show</span> (<span class="dt">Player</span> a) <span class="ot">=</span> <span class="fu">show</span> a</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">BasePlayer</span> <span class="dt">Player</span> <span class="kw">where</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    getYearlySalary (<span class="dt">Player</span> a) <span class="ot">=</span> getYearlySalary a</span></code></pre></div>
<p>and our new heterogenous list now supports:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">playerRegistry ::</span> [<span class="dt">Player</span>]</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>playerRegistry <span class="ot">=</span> [ <span class="dt">Player</span> (<span class="dt">Quarterback</span>  <span class="st">&quot;Tom Brady&quot;</span>)</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>                 , <span class="dt">Player</span> (<span class="dt">DefensiveEnd</span> <span class="st">&quot;Michael Strahan&quot;</span>)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>                 , <span class="dt">Player</span> (<span class="dt">Safety</span>       <span class="st">&quot;Richard Sherman&quot;</span>)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>                 , <span class="op">...</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>                 ]</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ot">printPlayerList ::</span> <span class="dt">IO</span> ()</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>printPlayerList <span class="ot">=</span> forM_ playerRegistry <span class="fu">print</span> <span class="co">-- unchanged</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="ot">average_salary ::</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>average_salary <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    salaries <span class="ot">&lt;-</span> for playerRegistry getYearlySalary <span class="co">-- (`for` from Data.Traversable)</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> <span class="op">$</span> (<span class="fu">sum</span> salaries) <span class="op">/</span> (<span class="fu">length</span> salaries)</span></code></pre></div>
<p>So we can have a heterogenous list – but we can only perform operations which are supported by the <code>Player</code> type. In this sense, the <code>Player</code> type encodes our <em>intent</em>.</p>
<h2 class="title is-2" id="conclusion">Conclusion</h2>
<p>In this post, we’ve seen how to create heterogenous lists in Haskell. However, contrary to dynamic languages, we can only do so <em>provided we are explicit</em> about our intent. That means we get the safety of strong, static types with some added flexibility if we so choose.</p>
<p>If you’re interested in type-level programming, including but not limited to the content of this present post, I strongly recommend Rebecca Skinner’s <a href="https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html">An Introduction to Type Level Programming</a></p>
<p><em>Thanks to <a href="https://brandonchinn178.github.io/blog/">Brandon Chinn</a> for some explanation on how to simplify existential types</em>.</p>]]></summary>
</entry>
<entry>
    <title>In defence of the PhD prelim exam</title>
    <link href="https://laurentrdc.xyz//posts/prelim.html" />
    <id>https://laurentrdc.xyz//posts/prelim.html</id>
    <published>2021-06-12T00:00:00Z</published>
    <updated>2021-06-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In the <a href="http://www.physics.mcgill.ca">department of Physics</a> at McGill University, there are a few requirements for graduation in the PhD program. One of these requirements is to pass the <em>preliminary examination</em>, or prelim for short, at the end of the first year<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. This type of examination is becoming rarer across North America. The Physics department has been discussing the modernization of the prelim, either by changing its format or removing it entirely.</p>
<p>In this post, I want to explain what the prelim is and why I think its essence should be preserved.</p>
<h3 class="title is-3" id="what-is-the-prelim">What is the prelim?</h3>
<p>The prelim in its pre-COVID-19 form is a 6h sit-down exam, split in two 3h sessions. It aims to test students’ mastery of Physics concepts at the undergraduate level. At McGill, there are four themes of questions:</p>
<ol type="1">
<li>Classical mechanics and special relativity;</li>
<li>Thermodynamics and statistical mechanics;</li>
<li>Electromagnetism;</li>
<li>Quantum mechanics.</li>
</ol>
<p>The first 3h session is composed of 16 short questions, 10 of which must be answered. Some of the short questions are conceptual, while other involve a small calculations. Here is an example of a short question from the year I passed the prelim:</p>
<blockquote>
<p>Imagine a planet being a long infinite solid cylinder of radius <span class="math inline">\(R\)</span> with a mass per unit length <span class="math inline">\(\Lambda\)</span>. The matter is uniformly distributed over its radius. Find the potential and gravitational field everywhere, i.e. inside and outside the cylinder, and sketch the field lines.</p>
</blockquote>
<p>The second 3h session is composed of 8 long questions, split evenly among the four themes. Four questions must be answered (no more!), with at least one question from each theme. Here is an example of a long question from the year I passed the prelim:</p>
<blockquote>
<p>A simple 1-dimensional model for an ionic crystal (such as NaCl) consists of an array of <span class="math inline">\(N\)</span> point charges in a straight line, alternately <span class="math inline">\(+e\)</span> and <span class="math inline">\(−e\)</span> and each at a distance <span class="math inline">\(a\)</span> from its nearest neighbours. If <span class="math inline">\(N\)</span> is very large, find the potential energy of a charge in the middle of the row and of one at the end of the row in the form <span class="math inline">\(\alpha e^2/(4\pi \epsilon_0 a)\)</span>.</p>
</blockquote>
<p>I passed the prelim exam in 2018. For the curious, here are all the questions from that year: <a href="/files/prelim/prelim-short-2018.pdf">short (PDF)</a> and <a href="/files/prelim/prelim-long-2018.pdf">long (PDF)</a>. The department of Physics also keeps a <a href="http://www.physics.mcgill.ca/grads/prelim/">record of the prelim questions going back to 1996</a>. Senior undergraduates are well-equipped to answer prelim questions. The difficulty comes from the breath of possible questions, as well as the time constraint.</p>
<h3 class="title is-3" id="a-test-of-competence">A test of competence</h3>
<p>Of course, the prelim is only one of the requirements on the way to earn a doctoral degree. Most importantly, PhD students need to write a dissertation and defend its content in front of a committee of experts. So why have the prelim at all?</p>
<p>The prelim serves as a way to ensure that all PhD students have a certain level of competence in all historical areas of Physics. Evaluating students for admission to the Physics department is inherently hard because it is difficult to compare academic records from different institutions across the world.</p>
<p>Earning a PhD makes you an expert in a narrow subject. Passing the prelim indicates that students have a baseline knowledge across all historical Physics discipline.</p>
<h3 class="title is-3" id="proposed-alternative-the-comprehensive-examination">Proposed alternative: the comprehensive examination</h3>
<p>Not every department in the McGill Faculty of Science requires PhD students to pass a prelim exam. Another popular alternative, in use in the Chemistry department for example, is the so-called <em>comprehensive examination</em><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<p>The structure of the comprehensive exam varies across departments, but generally it involves the student writing a multi-page project proposal and defending this proposal in front of a committee of faculty members. In the course of the comprehensive exam, committee members may ask the student any question related to their research topic.</p>
<p>A comprehensive exam has two attractive attributes. First, its scope is closer to students’ area of research. Second, a large part of the comprehensive (the project proposal) can be done offline, without the pressure of being timed.</p>
<h3 class="title is-3" id="in-defence-of-the-prelim">In defence of the prelim</h3>
<p>The prelim is a stressful event. Not everyone is comfortable in a sit-down exam setting. A PhD career can end because someone slept poorly the night before the exam. I support any and all adjustments to the current prelim format to make the experience more accessible in this sense.</p>
<p>My main objection with replacing the prelim with something closer to the comprehensive exam is the <em>functionalization of education</em>. Removing the prelim eliminates the incentive to have a baseline knowledge across Physics. It encourages PhD students to have an even narrower set of skills, making the PhD program more focused around the resulting dissertation.</p>
<p>The comprehensive exam is inherently about making students’ experience more focused on their research area. This is appealing from students point-of-view: why should they have to go out of their way to stay aware about classical mechanics, something which they might never use? The comprehensive exam (in the format that I have described above) streamlines the requirements for graduation.</p>
<p>The graduate student experience is about much more than the resulting dissertation. We want our students to be more than just experts in their narrow fields; we also want them to be ready to contribute to society beyond their immediate expertise. Does the prelim ensure that this is the case? Of course not. But removing the prelim sends the wrong message about what it means to graduate with a PhD.</p>
<p>On a personal note, the prelim made me review all of my undergraduate studies. I purchased the Feynman Lectures on Physics and read all three volumes. With a Masters’ degree under my belt, I was able to appreciate my learnings under a new light, even though I haven’t used most of it since then. While I cannot say that the exam was fun, the studying experience was definitely one of the highlights of my PhD.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Other institutions might call it the qualifying examination.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Again, this might have other names at other institutions.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Harnessing symmetry to find the center of a diffraction pattern</title>
    <link href="https://laurentrdc.xyz//posts/autocenter.html" />
    <id>https://laurentrdc.xyz//posts/autocenter.html</id>
    <published>2021-01-23T00:00:00Z</published>
    <updated>2021-01-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Ultrafast electron diffraction involves the analysis of <em>diffraction patterns</em>. Here is an example diffraction pattern for a thin (&lt;100nm) flake of graphite<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>:</p>
<figure>
<img src="generated/pandocplot10984160786568321089.png" class="python image" alt="Diffraction pattern of graphite (Source code)" /><figcaption aria-hidden="true">Diffraction pattern of graphite (<a href="generated/pandocplot10984160786568321089.src.html">Source code</a>)</figcaption>
</figure>
<p>A diffraction pattern is effectively the intensity of the Fourier transform. Given that crystals like graphite are well-ordered, the diffraction peaks (i.e. Fourier components) are very large. You can see that the diffraction pattern is six-fold symmetric; that’s because the atoms in graphite arrange themselves in a honeycomb pattern, which is also six-fold symmetric. In these experiments, the fundamental Fourier component is so strong that we need to block it. That’s what that black <em>beam-block</em> is about.</p>
<p>There are crystals that are not as well-ordered as graphite. Think of a powder made of many small crystallites, each being about 50nm x 50nm x 50nm. Diffraction electrons through a sample like that results in a kind of average of all possible diffraction patterns. Here’s an example with polycrystalline Chromium:</p>
<figure>
<img src="generated/pandocplot6029202209509176998.png" class="python image" alt="Diffraction pattern of polycrystalline Chromium (Source code)" /><figcaption aria-hidden="true">Diffraction pattern of polycrystalline Chromium (<a href="generated/pandocplot6029202209509176998.src.html">Source code</a>)</figcaption>
</figure>
<p>Each ring in the above pattern pattern corresponds to a Fourier component. Notice again how symmetric the pattern is; the material itself is symmetric enough that the fundamental Fourier component needs to be blocked.</p>
<p>For my work on <a href="https://github.com/LaurentRDC/iris-ued">iris-ued</a>, a data analysis package for ultrafast electron scattering, I needed to find a reliable, automatic way to get the center of such diffraction patterns to get rid of the manual work required now. So let’s see how!</p>
<h2 class="title is-2" id="first-try-center-of-mass">First try: center of mass</h2>
<p>A first naive attempt might start with the <em>center-of-mass</em>, i.e. the average of pixel positions weighted by their intensity. Since intensity is symmetric about the center, the <em>center-of-mass</em> should coincide with the actual physical center of the image.</p>
<p>Good news, <a href="https://docs.scipy.org/doc/scipy/reference/ndimage.html#multidimensional-image-processing-scipy-ndimage">scipy’s <code>ndimage</code> module</a> exports such a function: <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html#scipy.ndimage.center_of_mass"><code>center_of_mass</code></a>. Let’s try it:</p>
<figure>
<img src="generated/pandocplot18080795775328683504.png" class="python image" alt="Demonstration of using scipy.ndimage.center_of_mass to find the center of diffraction patterns. (Source code)" /><figcaption aria-hidden="true">Demonstration of using <code>scipy.ndimage.center_of_mass</code> to find the center of diffraction patterns. (<a href="generated/pandocplot18080795775328683504.src.html">Source code</a>)</figcaption>
</figure>
<p>Not bad! Especially in the first image, really not a bad first try. But I’m looking for something <em>pixel-perfect</em>. Intuitively, the beam-block in each image should mess with the calculation of the center of mass. Let’s define the following areas that we would like to ignore:</p>
<figure>
<img src="generated/pandocplot1537609969393724765.png" class="python image" alt="Areas that are bright are defined as being masked (Source code)" /><figcaption aria-hidden="true">Areas that are bright are defined as being masked (<a href="generated/pandocplot1537609969393724765.src.html">Source code</a>)</figcaption>
</figure>
<p>Masks are generally defined as boolean arrays with True (or 1) where pixels are valid, and False (or 0) where pixels are invalid. Therefore, we should ignore the weight of masked pixels. <code>scipy.ndimage.center_of_mass</code> does not support this feature; we need an extension of <code>center_of_mass</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> center_of_mass_masked(im, mask):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    rr, cc <span class="op">=</span> np.indices(im.shape)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    weights <span class="op">=</span> im <span class="op">*</span> mask.astype(im.dtype)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> np.average(rr, weights<span class="op">=</span>weights)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    c <span class="op">=</span> np.average(cc, weights<span class="op">=</span>weights)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r, c</span></code></pre></div>
<p>This is effectively an average of the row and column coordinates (<code>rr</code> and <code>cc</code>) weighted by the image intensity. The trick here is that <code>mask.astype(im.dtype)</code> is 0 where pixels are “invalid”; therefore they don’t count in the average! Let’s look at the result:</p>
<figure>
<img src="generated/pandocplot7170076436205444043.png" class="python image" alt="Demonstration of using center_of_mass_masked (see above) to find the center of diffraction patterns. (Source code)" /><figcaption aria-hidden="true">Demonstration of using <code>center_of_mass_masked</code> (see above) to find the center of diffraction patterns. (<a href="generated/pandocplot7170076436205444043.src.html">Source code</a>)</figcaption>
</figure>
<p>I’m not sure if it’s looking better, honestly. But at least we have an approximate center! That’s a good starting point that feeds in to the next step.</p>
<h2 class="title is-2" id="friedel-pairs-and-radial-inversion-symmetry">Friedel pairs and radial inversion symmetry</h2>
<p>In his thesis<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, which is now also <a href="https://www.springer.com/us/book/9783030548506?utm_campaign=3_pier05_buy_print&amp;utm_content=en_08082017&amp;utm_medium=referral&amp;utm_source=google_books#otherversion=9783030548513">a book</a>, Nelson Liu describes how he does it:</p>
<blockquote>
<p>A rough estimate of its position is obtained by calculating the ‘centre of intensity’ or intensity-weighted arithmetic mean of the position of &gt; 100 random points uniformly distributed over the masked image; this is used to match diffraction spots into Friedel pairs amongst those found earlier. By averaging the midpoint of the lines connecting these pairs of points, a more accurate position of the centre is obtained.</p>
</blockquote>
<p>Friedel pairs are peaks related by inversion through the center of the diffraction pattern. The existence of these pairs is guaranteed by crystal symmetry. For polycrystalline patterns, Friedel pairs are averaged into rings; rings are always inversion-symmetric about their centers. Here’s an example of two Friedel pairs:</p>
<figure>
<img src="generated/pandocplot11071476462660722882.png" class="python image" alt="Example of two Friedel pairs: white circles form pair 1, while red circles form pair 2. (Source code)" /><figcaption aria-hidden="true">Example of two Friedel pairs: white circles form pair 1, while red circles form pair 2. (<a href="generated/pandocplot11071476462660722882.src.html">Source code</a>)</figcaption>
</figure>
<p>The algorithm by Liu was meant for single-crystal diffraction patterns with well-defined peaks, and not so much for rings. However, we can distill Liu’s idea into a new, more general approach. If the approximate center coincides with the actual center of the image, then the image should be invariant under radial-inversion with respect to the approximate center. Said another way: if the image <span class="math inline">\(I\)</span> is defined on polar coordinates <span class="math inline">\((r, \theta)\)</span>, then the center maximizes correlation between <span class="math inline">\(I(r, \theta)\)</span> and <span class="math inline">\(I(-r, \theta)\)</span>. Thankfully, computing the masked correlation between images <a href="/posts/mnxc.html">is something I’ve worked on before</a>!</p>
<p>Let’s look at what radial inversion looks like. There are ways to do it with interpolation, e.g. <a href="https://scikit-image.org/docs/stable/api/skimage.transform.html#warp">scikit-image’s <code>warp</code> function</a>. However, in my testing, this is incredibly slow compared to what I will show you. A faster approach is to consider that if the image was centered on the array, then radial inversion is really flipping the direction of the array axes; that is, if the image array <code>I</code> has size (128, 128), and the center is at (64, 64), the radial inverse of <code>I</code> is <code>I[::-1, ::-1]</code> (numpy) / <code>flip(flip(I, 1), 2)</code> (MATLAB) / <code>I[end:-1:1,end:-1:1]</code> (Julia). Another important note is that if the approximate center of the image is far from the center of the array, the overlap between the image and its radial inverse is limited. Consider this:</p>
<figure>
<img src="generated/pandocplot5254598003233498941.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot5254598003233498941.src.html">Source code</a>)</figcaption>
</figure>
<p>If we cropped out the bright areas around the frame, then the approximate center found would coincide with the center of the array; then, radial inversion is very fast.</p>
<figure>
<img src="generated/pandocplot16660842942453033652.png" class="python image" alt="Demonstration of what parts of the image to crop so that the image center coincides with the center of the array. (Source code)" /><figcaption aria-hidden="true">Demonstration of what parts of the image to crop so that the image center coincides with the center of the array. (<a href="generated/pandocplot16660842942453033652.src.html">Source code</a>)</figcaption>
</figure>
<p>Now, especially for the right column of images, it’s pretty clear that the approximate center wasn’t perfect. The <em>correction</em> to the approximate center is can be calculated with the masked normalized cross-correlation<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> <a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>:</p>
<figure>
<img src="generated/pandocplot8319521437918089656.png" class="python image" alt="Top left: diffraction pattern. Top right: radially-inverted diffraction pattern about an approximate center. Bottom left: masked normalized cross-correlation between the two diffraction patterns. Bottom right: 2x zoom on the cross-correlation shows the translation mismatch between the diffraction patterns. (Source code)" /><figcaption aria-hidden="true"><strong>Top left</strong>: diffraction pattern. <strong>Top right</strong>: radially-inverted diffraction pattern about an approximate center. <strong>Bottom left</strong>: masked normalized cross-correlation between the two diffraction patterns. <strong>Bottom right</strong>: 2x zoom on the cross-correlation shows the translation mismatch between the diffraction patterns. (<a href="generated/pandocplot8319521437918089656.src.html">Source code</a>)</figcaption>
</figure>
<p>The cross-correlation in the bottom right corner (zoomed by 2x) shows that the true center is the approximate center we found earlier, corrected by the small shift (white arrow)! For single-crystal diffraction patterns, the resulting is even more striking:</p>
<figure>
<img src="generated/pandocplot377250785092841131.png" class="python image" alt="Top left: diffraction pattern. Top right: radially-inverted diffraction pattern about an approximate center. Bottom left: masked normalized cross-correlation between the two diffraction patterns. Bottom right: 2x zoom on the cross-correlation shows the translation mismatch between the diffraction patterns. (Source code)" /><figcaption aria-hidden="true"><strong>Top left</strong>: diffraction pattern. <strong>Top right</strong>: radially-inverted diffraction pattern about an approximate center. <strong>Bottom left</strong>: masked normalized cross-correlation between the two diffraction patterns. <strong>Bottom right</strong>: 2x zoom on the cross-correlation shows the translation mismatch between the diffraction patterns. (<a href="generated/pandocplot377250785092841131.src.html">Source code</a>)</figcaption>
</figure>
<p>We can put the two steps together and determine a pixel-perfect center:</p>
<figure>
<img src="generated/pandocplot821136846591811545.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot821136846591811545.src.html">Source code</a>)</figcaption>
</figure>
<h2 class="title is-2" id="bonus-low-quality-diffraction">Bonus: low-quality diffraction</h2>
<p>Here’s a fun consequence: the technique works also for diffraction patterns that are pretty crappy and very far off center, provided that the asymmetry in the background is taken care-of:</p>
<figure>
<img src="generated/pandocplot9440857160188182992.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot9440857160188182992.src.html">Source code</a>)</figcaption>
</figure>
<h2 class="title is-2" id="conclusion">Conclusion</h2>
<p>In this post, we have determined a robust way to compute the center of a diffraction pattern without any parameters, by making use of a strong invariant: radial inversion symmetry. My favourite part: this method admits no free parameters!</p>
<p>If you want to make use of this, <a href="https://scikit-ued.readthedocs.io/en/master/functions/skued.autocenter.html#skued.autocenter">take a look at <code>autocenter</code></a>, a new function that has been added to <a href="https://github.com/LaurentRDC/scikit-ued">scikit-ued</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>L.P. René de Cotret <em>et al</em>, <em>Time- and momentum-resolved phonon population dynamics with ultrafast electron diffuse scattering</em>, Phys. Rev. B <strong>100</strong> (2019) <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.100.214115">DOI: 10.1103/PhysRevB.100.214115</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Liu, Lai Chung. <a href="http://hdl.handle.net/1807/97517">Chemistry in Action: Making Molecular Movies with Ultrafast Electron Diffraction and Data Science</a>. University of Toronto, 2019.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Dirk Padfield. <em>Masked object registration in the Fourier domain</em>. IEEE Transactions on Image Processing, <strong>21</strong>(5):2706–2718, 2012. <a href="https://doi.org/10.1109/TIP.2011.2181402">DOI: 10.1109/TIP.2011.2181402</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>Dirk Padfield. <em>Masked FFT registration</em>. Prov. Computer Vision and Pattern Recognition. pp 2918-2925 (2010). <a href="https://doi.org/10.1109/CVPR.2010.5540032">DOI:10.1109/CVPR.2010.5540032</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Matplotlib for graphic design</title>
    <link href="https://laurentrdc.xyz//posts/banner.html" />
    <id>https://laurentrdc.xyz//posts/banner.html</id>
    <published>2020-11-03T00:00:00Z</published>
    <updated>2020-11-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In this post, I will show you how I generated the banner for this website using <a href="https://matplotlib.org/">Matplotlib</a>. In case it disappears in the future, here is an image of it:</p>
<figure>
<img src="generated/pandocplot9028375791655569421.png" class="python image" />
</figure>
<p>Matplotlib is a plotting library for python, historically inspired by the plotting capabilities of MATLAB. You can take a look at the various <a href="https://matplotlib.org/gallery/index.html">examples</a> on their website. One thing that is not immediately obvious is that you can use Matplotlib to also draw shapes! In this sense, Matplotlib becomes a graphic design library.</p>
<p>(You can see the exact source code for the images below by clicking on the link in the caption)</p>
<h3 class="title is-3" id="basic-shapes">Basic shapes</h3>
<p>Let’s start at the beginning: drawing a single hexagon.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.patches <span class="im">as</span> patches</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> draw_hexagon(ax, center, radius, color<span class="op">=</span><span class="st">&quot;w&quot;</span>):</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    ax.add_patch(</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        mpatches.RegularPolygon(</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            xy<span class="op">=</span>center,</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            numVertices<span class="op">=</span><span class="dv">6</span>,</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            radius<span class="op">=</span>radius,</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            facecolor<span class="op">=</span>color,</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>            edgecolor<span class="op">=</span><span class="st">&quot;k&quot;</span>,</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            orientation<span class="op">=</span><span class="dv">0</span>,</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            fill<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<p>Using the function, we can draw a tiling of hexagons. Let’s first set-up our plot:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># Note that Matplotlib figure size is (width, height) in INCHES...</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co"># We want it to be 100mm x 100mm</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>mm_to_in <span class="op">=</span> <span class="fl">0.03937008</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>figure, ax <span class="op">=</span> plt.subplots(<span class="dv">1</span>,<span class="dv">1</span>, figsize<span class="op">=</span>(<span class="dv">100</span> <span class="op">*</span> mm_to_in, <span class="dv">100</span><span class="op">*</span>mm_to_in))</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co"># Hide as much of the axis borders/margins as possible</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>ax.axis(<span class="st">&quot;off&quot;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>plt.subplots_adjust(top<span class="op">=</span><span class="dv">1</span>, bottom<span class="op">=</span><span class="dv">0</span>, left<span class="op">=</span><span class="dv">0</span>, right<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>ax.set_xlim([<span class="dv">0</span>, <span class="dv">100</span>])</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>ax.set_ylim([<span class="dv">0</span>, <span class="dv">100</span>])</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co"># Hexagon radius in mm</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>radius <span class="op">=</span> <span class="dv">4</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="co"># Dimensions of the bounding box of the hexagons</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>width <span class="op">=</span> math.sqrt(<span class="dv">3</span>) <span class="op">*</span> radius</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>height <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> radius</span></code></pre></div>
<h3 class="title is-3" id="tiling">Tiling</h3>
<p>We note that a tiling of <em>regular</em> hexagons requires a different offset for every row. If you imagine rows being numbered starting at 0, hexagons in rows with odd indices need to be offset by <span class="math inline">\(\frac{\sqrt{3}}{2} r\)</span>, where <span class="math inline">\(r\)</span> is the radius (or distance from the center to vertex). To find the centers of the hexagons, the following loop does the trick:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> itertools</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>centers <span class="op">=</span> <span class="bu">list</span>()</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> offset_x, offset_y <span class="kw">in</span> [(<span class="dv">0</span>, <span class="dv">0</span>), (width <span class="op">/</span> <span class="dv">2</span>, (<span class="dv">3</span> <span class="op">/</span> <span class="dv">2</span>) <span class="op">*</span> radius)]:</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    rows    <span class="op">=</span> np.arange(start<span class="op">=</span>offset_x, stop<span class="op">=</span><span class="dv">105</span>, step<span class="op">=</span>width)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    columns <span class="op">=</span> np.arange(start<span class="op">=</span>offset_y, stop<span class="op">=</span><span class="dv">105</span>, step<span class="op">=</span><span class="dv">3</span> <span class="op">*</span> radius)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x, y <span class="kw">in</span> itertools.product(rows, columns):</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        centers.append( (x,y) )</span></code></pre></div>
<p>Once we know about the centers of the hexagons, we can place them one-by-one:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (x,y) <span class="kw">in</span> centers:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    draw_hexagon(ax, center<span class="op">=</span>(x,y), radius<span class="op">=</span>radius)</span></code></pre></div>
<p>Here’s what it looks like so far:</p>
<figure>
<img src="generated/pandocplot7328666397202547941.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot7328666397202547941.src.html">Source code</a>)</figcaption>
</figure>
<h3 class="title is-3" id="color">Color</h3>
<p>The figure above has the wrong dimension, but you get the idea. Let’s color the hexagons appropriately. In the banner, the color of the hexagons is based on the <a href="https://matplotlib.org/tutorials/colors/colormaps.html">“inferno” colormap</a>. The color radiates away from the bottom left corner:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> draw_hexagon(ax, center, radius, color<span class="op">=</span><span class="st">&#39;w&#39;</span>):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    ax.add_patch(</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        mpatches.RegularPolygon(</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            xy<span class="op">=</span>center,</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>            numVertices<span class="op">=</span><span class="dv">6</span>,</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            radius<span class="op">=</span>radius,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>            facecolor<span class="op">=</span>color,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>            edgecolor<span class="op">=</span><span class="st">&quot;none&quot;</span>, <span class="co">#note: edgecolor=None is actually the default value!</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>            orientation<span class="op">=</span><span class="dv">0</span>,</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>            fill<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>colormap <span class="op">=</span> plt.get_cmap(<span class="st">&#39;inferno&#39;</span>)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (x,y) <span class="kw">in</span> centers:</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># radius away from bottom left corner</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    <span class="co"># proportional to the distance of the top right corner</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># i.e. 0 &lt; r &lt; 1</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> math.hypot(x, y) <span class="op">/</span> math.hypot(<span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    draw_hexagon(ax, center<span class="op">=</span>(x, y), radius<span class="op">=</span>radius, color<span class="op">=</span>colormap(r))</span></code></pre></div>
<p>Here’s the result:</p>
<figure>
<img src="generated/pandocplot15815033109213238152.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot15815033109213238152.src.html">Source code</a>)</figcaption>
</figure>
<p>Because of rounding errors of the hexagon dimensions, there is some visible spacing between the hexagons. To get rid of it, we draw the hexagons a bit larger (0.2 millimeters):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> draw_hexagon(ax, center, radius, color<span class="op">=</span><span class="st">&#39;w&#39;</span>):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    ax.add_patch(</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        mpatches.RegularPolygon(</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>            xy<span class="op">=</span>center,</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>            numVertices<span class="op">=</span><span class="dv">6</span>,</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>            radius<span class="op">=</span>radius <span class="op">+</span> <span class="fl">0.2</span>,</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>            facecolor<span class="op">=</span>color,</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>            edgecolor<span class="op">=</span><span class="st">&quot;none&quot;</span>,</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>            orientation<span class="op">=</span><span class="dv">0</span>,</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>            fill<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<h3 class="title is-3" id="a-bit-of-randomness">A bit of randomness</h3>
<p>For a light touch of whimsy, I like to make the color fluctuate a little:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>colormap <span class="op">=</span> plt.get_cmap(<span class="st">&#39;inferno&#39;</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (x,y) <span class="kw">in</span> centers:</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># radius away from bottom left corner</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># proportional to the distance of the top right corner</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># i.e. 0 &lt; r &lt; 1</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> math.hypot(x, y) <span class="op">/</span> math.hypot(<span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    r <span class="op">+=</span> random.gauss(<span class="dv">0</span>, <span class="fl">0.01</span>)</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    draw_hexagon(ax, center<span class="op">=</span>(x, y), radius<span class="op">=</span>radius, color<span class="op">=</span>colormap(r))</span></code></pre></div>
<p>We arrive at the final result:</p>
<figure>
<img src="generated/pandocplot18370187165915458108.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot18370187165915458108.src.html">Source code</a>)</figcaption>
</figure>
<p>You can imagine adapting this approach to different tilings, and different colors schemes. Here’s a final example using squares and the <a href="https://matplotlib.org/tutorials/colors/colormaps.html">“cool” colormap</a>:</p>
<figure>
<img src="generated/pandocplot13764755369364099386.png" class="python image" alt=" (Source code)" /><figcaption aria-hidden="true"> (<a href="generated/pandocplot13764755369364099386.src.html">Source code</a>)</figcaption>
</figure>]]></summary>
</entry>
<entry>
    <title>The masked normalized cross-correlation and its application to image registration</title>
    <link href="https://laurentrdc.xyz//posts/mnxc.html" />
    <id>https://laurentrdc.xyz//posts/mnxc.html</id>
    <published>2019-04-30T00:00:00Z</published>
    <updated>2020-12-18</updated>
    <summary type="html"><![CDATA[<p>Image registration consists in determinining the most likely transformation between two images — most importantly translation, which is what I am most concerned with.</p>
<p>How can we detect the translation between two otherwise similar image? This is an application of <strong>cross-correlation</strong>. The cross-correlation of two images is the degree of similitude between images for every possible translation between them. Mathematically, given grayscale images as discrete functions <span class="math inline">\(I_1(i,j)\)</span> and <span class="math inline">\(I_2(i,j)\)</span>, their cross-correlation <span class="math inline">\(I_1 \star I_2\)</span> is defined as: <span class="math display">\[
    (I_1 \star I_2)(u, v) \equiv \sum_{i,j} I_1(i, j) \cdot I_2(i - u, j - v)
\]</span></p>
<p>For example, if <span class="math inline">\(I_1 = I_2\)</span>, then <span class="math inline">\(I_1 \star I_2\)</span> has its maximum at <span class="math inline">\((u,v) =\)</span> (0,0). What happens if <span class="math inline">\(I_1\)</span> and <span class="math inline">\(I_2\)</span> are shifted from each other? Let’s see:</p>
<figure>
<img src="generated/pandocplot5304830775491324190.png" class="python image" alt="The cross-correlation between shifted images exhibits a global maxima at the location corresponding to relative translation. (Source code)" /><figcaption aria-hidden="true">The cross-correlation between shifted images exhibits a global maxima at the location corresponding to relative translation. (<a href="generated/pandocplot5304830775491324190.src.html">Source code</a>)</figcaption>
</figure>
<p>In the above example, the cross-correlation is maximal at (50, 0), which is exactly the translation required to <em>shift back</em> the second image to match the first one. Finding the translation between images is then a simple matter of determining the glocal maximum of the cross-correlation. This operation is so useful that it is implemented in the Python library <a href="https://scikit-image.org">scikit-image</a> as <a href="https://scikit-image.org/docs/stable/api/skimage.feature.html#skimage.feature.register_translation"><code>skimage.feature.register_translation</code></a>.</p>
<p>It turns out that in my field of research, image registration can be crucial to correct experimental data. My primary research tool is <a href="http://www.physics.mcgill.ca/siwicklab">ultrafast electron diffraction</a>. Without knowing the details, you can think of this technique as a kind of microscope. A single image from one of our experiments looks like this:</p>
<figure>
<img src="/images/mnxc/Cr_1.png" class="image" alt="An electron diffraction pattern of polycrystalline chromium." /><figcaption aria-hidden="true">An electron diffraction pattern of polycrystalline chromium.</figcaption>
</figure>
<p>Most of the electron beam is unperturbed by the sample; this is why we use a metal beam-block (seen as a black rod in the image above) to prevent the electrons from damaging our apparatus.</p>
<p>Our experiments are synthesized from hundreds of gigabytes of images like the one above, and it may take up to 72h (!) to take all the images we need. Over the course of this time, the electron beam may shift in a way that moves the image, but <em>not the beam-block</em><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. Heres’s what I mean:</p>
<figure>
<img src="generated/pandocplot15663686306488886859.png" class="python image" alt="Here is the difference between two equivalent images, acquired a few hours apart. The shift between them is evident in the third panel. (Source code)" /><figcaption aria-hidden="true">Here is the difference between two equivalent images, acquired a few hours apart. The shift between them is evident in the third panel. (<a href="generated/pandocplot15663686306488886859.src.html">Source code</a>)</figcaption>
</figure>
<p>This does not fly. We need to be able to compare images together, and shifts by more than 1px are problematic. We need to correct for this shift, for every image, with respect to the first one. However, we are also in a bind, because unlike the example above, the images are not completely shifted; one part of them, the beam-block, is <em>static</em>, while the image behind it shifts.</p>
<p>The crux of the problem is this: the cross-correlation between images gives us the shift between them. However, it is not immediately obvious how to tell the cross-correlation operation to ignore <em>certain parts</em> of the image. Is there some kind of operation, similar to the cross-correlation, that allows to mask parts of the images we want to ignore?</p>
<p>Thanks to the work of Dr. Dirk Padfield<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>, we now know that such an operation exists: the <strong>masked normalized cross-correlation</strong>. <a href="https://doi.org/10.1109/TIP.2011.2181402">In his 2012 article</a>, he explains the procedure and performance of this method to register images with masks. One such example is the registration of ultrasound images; <a href="/images/mnxc/criminal.png">unfortunately, showing you the figure from the article would cost me 450 $US</a>, so you’ll have to go look at it yourselves.</p>
<hr>
<p>In order to fix our registration problem, then, I implemented the masked normalized cross-correlation operation — and its associated registration function — in our ultrafast electron diffraction toolkit, <a href="https://scikit-ued.rtfd.io">scikit-ued</a><a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>. Here’s an example of it in action:</p>
<figure>
<img src="generated/pandocplot3701438960266822665.png" class="python image" alt="Using the masked-normalized cross-correlation to align two diffraction patterns of polycrystalline chromium. The mask shown tells the algorithm to ignore the beam-block of both images. (Source code)" /><figcaption aria-hidden="true">Using the masked-normalized cross-correlation to align two diffraction patterns of polycrystalline chromium. The mask shown tells the algorithm to ignore the beam-block of both images. (<a href="generated/pandocplot3701438960266822665.src.html">Source code</a>)</figcaption>
</figure>
<h2 class="title is-2" id="contributing-to-scikit-image">Contributing to scikit-image</h2>
<p>However, since this tool could see use in a more general setting, I decided to contribute it to <a href="https://scikit-image.org/">scikit-image</a>:</p>
<ol type="1">
<li>My contribution starts by bringing up the subject via a GitHub issue (<a href="https://github.com/scikit-image/scikit-image/issues/3330">issue #3330</a>).</li>
<li>I forked scikit-image and integrated the code and tests from scikit-ued to scikit-image. The changes are visible in the <a href="https://github.com/scikit-image/scikit-image/pull/3334">pull request #3334</a>.</li>
<li>Finally, some documentation improvements and an additional gallery example were added in <a href="https://github.com/scikit-image/scikit-image/pull/3528">pull request #3528</a>.</li>
</ol>
<p>In the end, <strong>a new function has been added, <a href="https://scikit-image.org/docs/stable/api/skimage.registration.html#skimage.registration.phase_cross_correlation"><code>skimage.registration.phase_cross_correlation</code></a></strong> (previously <code>skimage.feature.masked_register_translation</code>).</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Technically, the rotation of the electron beam about its source will also move the shadow of the beam-block. However, because the beam-block is much closer to the electron source, the effect is imperceptible.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Dirk Padfield. <em>Masked object registration in the Fourier domain</em>. IEEE Transactions on Image Processing, <strong>21</strong>(5):2706–2718, 2012. <a href="https://doi.org/10.1109/TIP.2011.2181402">DOI: 10.1109/TIP.2011.2181402</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Dirk Padfield. <em>Masked FFT registration</em>. Prov. Computer Vision and Pattern Recognition. pp 2918-2925 (2010). <a href="https://doi.org/10.1109/CVPR.2010.5540032">DOI:10.1109/CVPR.2010.5540032</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>L. P. René de Cotret et al, <em>An open-source software ecosystem for the interactive exploration of ultrafast electron scattering data</em>, Advanced Structural and Chemical Imaging <strong>4</strong>:11 (2018) <a href="https://ascimaging.springeropen.com/articles/10.1186/s40679-018-0060-y">DOI:10.1186/s40679-018-0060-y</a>. This publication is open-access<i class="ai ai-open-access"></i> .<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>When one temperature is not enough: the two-temperature model</title>
    <link href="https://laurentrdc.xyz//posts/two-temp-model.html" />
    <id>https://laurentrdc.xyz//posts/two-temp-model.html</id>
    <published>2019-04-03T00:00:00Z</published>
    <updated>2021-04-13</updated>
    <summary type="html"><![CDATA[<p>Temperature is a measure of the average kinetic energy of all particles in a system. An example of such as system is presented below:</p>
<figure>
<img src="/images/Translational_motion.gif" class="image" alt="Translational motion of particles in a box. Some particles are colored red for better tracking. Image credit to A. Greg." /><figcaption aria-hidden="true">Translational motion of particles in a box. Some particles are colored red for better tracking. <a href="https://en.wikipedia.org/wiki/Thermodynamic_temperature#/media/File:Translational_motion.gif">Image credit to A. Greg.</a></figcaption>
</figure>
<p>Note that the above system has a temperature because there exists a clear <strong>average</strong> motion, even though not all particles are moving at the same velocity. This means, a system is at some temperature <span class="math inline">\(T\)</span> as long as the distribution of kinetic energies (often related to velocities) ressembles a <strong>normal distribution</strong>:</p>
<figure>
<img src="generated/pandocplot6366151208522576215.png" class="image" alt="Examples of distribution of particle kinetic energies. Left: distribution of particle energies with a well-defined temperature. Right: distribution of particle energies does not match an expected thermal equilibrium. (Source code)" /><figcaption aria-hidden="true">Examples of distribution of particle kinetic energies. <strong>Left</strong>: distribution of particle energies with a well-defined temperature. <strong>Right</strong>: distribution of particle energies does not match an expected thermal equilibrium. (<a href="generated/pandocplot6366151208522576215.src.html">Source code</a>)</figcaption>
</figure>
<p>So, a system with a well-defined temperature exhibits a normal distribution of particle energies. It turns out that it is possible to prepare systems into a state where there are <em>two clear average energies</em> , if only for a very short moment.</p>
<p>Real materials are composed of two types of particles, nuclei and electrons<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. These particles have widly different masses, so electromagnetic fields — for example, an intense pulse of light — will not affect them at the same time; since nuclei are at least ~1000x more massive than electrons, we should expect the electrons to react about ~1000x faster.</p>
<p>After decades of development culminating in the 2018 Nobel Prize in Physics, the production of ultrafast laser pulses (less than 30 femtoseconds<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>) is now routine. These ultrafast laser pulses can be used to prepare systems in a strange configuration: one with seemingly <em>two temperatures</em>, albeit only for a short time. Modeling of this situation in crystalline material was done decades ago, and the model is known as the <strong>two-temperature model</strong><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>Roughly 100fs after dumping a lot of energy into a material, the nuclei might not have reacted yet, and we might have the following energetic landscape:</p>
<figure>
<img src="generated/pandocplot15528396183690567069.png" class="image" alt="Idealized view of the distribution of kinetic energy, 100 femtosecond after photoexcitation by an ultrafast laser pulse. For a very short time, the system can be described by two temperatures; one for the lattice of nuclei, T_l, and one for the electronic system, T_e. (Source code)" /><figcaption aria-hidden="true">Idealized view of the distribution of kinetic energy, 100 femtosecond after photoexcitation by an ultrafast laser pulse. For a very short time, the system can be described by two temperatures; one for the lattice of nuclei, <span class="math inline">\(T_l\)</span>, and one for the electronic system, <span class="math inline">\(T_e\)</span>. (<a href="generated/pandocplot15528396183690567069.src.html">Source code</a>)</figcaption>
</figure>
<p>where the nucliei will still be at equilibrium temperature, and the electrons might be at a temperature of 20000<span class="math inline">\(^{\circ}\)</span>C. Therefore, <em>we have a system with two temperatures</em> for a few picoseconds<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>The atomic forces at the nanometer-scale are mostly electromagnetic, so I will consider the atomic nuclei as a single particle.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><span class="math inline">\(1\)</span> femtosecond <span class="math inline">\(= 10^{-15}\)</span> seconds<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>P. B. Allen, <em>Theory of thermal relaxation of electrons in metals</em> (1987). Physics Review Letters <strong>59</strong>, DOI: <a href="https://link.aps.org/doi/10.1103/PhysRevLett.59.1460">10.1103/PhysRevLett.59.1460</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><span class="math inline">\(1\)</span> picosecond <span class="math inline">\(= 1000\)</span> fs <span class="math inline">\(= 10^{-12}\)</span> seconds<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Example of a Pandoc filter to abstract away CSS framework quirks</title>
    <link href="https://laurentrdc.xyz//posts/bulma-pandoc-filter.html" />
    <id>https://laurentrdc.xyz//posts/bulma-pandoc-filter.html</id>
    <published>2018-09-12T00:00:00Z</published>
    <updated>2018-09-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>To make this static website render correctly on both desktop and mobile, I’ve decided to ‘upgrade’ my setup to use the <a href="https://bulma.io">Bulma CSS framework</a>. This introduced a problem I did not anticipate.</p>
<p>For example, consider the following “raw” HTML tag to create a level 1 title:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></span></code></pre></div>
<p>However, in Bulma, <a href="https://bulma.io/documentation/elements/title/">headings must be of a specific class</a>, like so <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-1 title --&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-1&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-2 title --&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h2</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-2&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h2&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-1 subtitle --&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;subtitle is-1&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></span></code></pre></div>
<p>Problem is, a lot of headings included on my website are generated from Markdown to HTML using <a href="http://pandoc.org/">Pandoc</a>. Predictably, Markdown headings like <code class="sourceCode markdown"><span class="fu"># Title</span></code> are converted to “raw” HTML headings like <code class="sourceCode html"><span class="kw">&lt;h1&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></code>, and not the <code class="sourceCode html"><span class="kw">&lt;h1</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-1&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></code> that I need to use.</p>
<p><strong>This is a textbook example of a problem that can be solved with a Pandoc filter.</strong></p>
<p>During the conversion from Markdown to HTML, Pandoc constructs an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> representing the document. A Pandoc filter is used to include transformations to this abstract syntax tree. This is precisely what we want : we want to transform headings into a slightly different type of headings that will play nicely with Bulma.</p>
<p>There are some examples in the <a href="http://pandoc.org/filters.html">Pandoc documentation on filters</a>, but I would like to document the process I used to create this filter.</p>
<p>We’ll be writing the filter in Haskell, because I can then include in directly in the website code generation (<a href="/posts/making-this-website.html">more info here</a>).</p>
<h3 class="title is-3" id="the-pandoc-abstract-syntax-tree">The Pandoc abstract syntax tree</h3>
<p>We need to familiarize ourselves with the Pandoc abstract syntax tree (AST). This is defined in the <a href="https://hackage.haskell.org/package/pandoc-types"><code>pandoc-types</code> package</a>, most importantly in the <code class="sourceCode haskell"><span class="dt">Text.Pandoc.Definition</span></code> module (see <a href="https://hackage.haskell.org/package/pandoc-types-1.17.5.1/docs/Text-Pandoc-Definition.html">here</a>).</p>
<p>We’re using Haskell, so let’s look at the data types. A Pandoc document is converted from some source format (in our case, Markdown) to the <code>Pandoc</code> type:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span></code></pre></div>
<p>Without looking at the details, we can see that a document is a list of blocks as well as some metadata. The <code class="sourceCode haskell"><span class="dt">Block</span></code> datatype is more interesting:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Plain</span> [<span class="dt">Inline</span>]        <span class="co">-- ^ Plain text, not a paragraph</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Para</span> [<span class="dt">Inline</span>]         <span class="co">-- ^ Paragraph</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    (<span class="op">...</span>)                   <span class="co">-- (omitted)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Header</span> <span class="dt">Int</span> <span class="dt">Attr</span> [<span class="dt">Inline</span>] <span class="co">-- ^ Header - level (integer) and text (inlines)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    (<span class="op">...</span>)                   <span class="co">-- (omitted)</span></span></code></pre></div>
<p>(source <a href="https://hackage.haskell.org/package/pandoc-types-1.17.5.1/docs/src/Text.Pandoc.Definition.html#Block">here</a>)</p>
<p>There we go! One of the possible type of blocks is a header. This header has a level (level 1 header is the largest title), some attributes, and <code class="sourceCode haskell">[<span class="dt">Inline</span>]</code> represents the content of the header. We’re interested in modifying the header attributes, so let’s look at <code class="sourceCode haskell"><span class="dt">Attr</span></code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Attributes: identifier, classes, key-value pairs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Attr</span> <span class="ot">=</span> ( <span class="dt">String</span>                <span class="co">-- Identifier. Not important</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            , [<span class="dt">String</span>]              <span class="co">-- ^ class      (e.g. [&quot;a&quot;, &quot;b&quot;] -&gt; class=&quot;a b&quot; in HTML)</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            , [(<span class="dt">String</span>, <span class="dt">String</span>)])   <span class="co">-- Not important</span></span></code></pre></div>
<p>The “classes” part of the attribute is precisely what we’d like to modify. Recall that to get Bulma to work, we want to have headings looking like <code class="sourceCode html"><span class="kw">&lt;h3</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-3&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h3&gt;</span></code>.</p>
<h3 class="title is-3" id="modifying-one-ast-node">Modifying one AST node</h3>
<p>Let’s write a function that modifies <code class="sourceCode haskell"><span class="dt">Block</span></code>s (i.e. one tree node) like we want <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- This is from the pandoc-types package</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span>   (<span class="dt">Block</span>(..), <span class="dt">Attr</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">toBulmaHeading ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Pattern matching on the input</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- Any Block that is actually a header should be changed</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>toBulmaHeading (<span class="dt">Header</span> level attrs xs) <span class="ot">=</span> <span class="dt">Header</span> level newAttrs xs</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>        (identifier, classes, keyvals) <span class="ot">=</span> attrs</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- We leave identifier and key-value pairs unchanged</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        newAttrs <span class="ot">=</span> ( identifier</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>                    <span class="co">-- We extend header classes to have the Bulma classes &quot;title&quot; and &quot;is-*&quot;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>                    <span class="co">-- where * is the header level</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>                   , classes <span class="op">&lt;&gt;</span> [<span class="st">&quot;title&quot;</span>, <span class="st">&quot;is-&quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> level]</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>                   , keyvals)</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- We leave any non-header blocks unchanged</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>toBulmaHeading x <span class="ot">=</span> x</span></code></pre></div>
<h3 class="title is-3" id="modifying-the-entire-ast">Modifying the entire AST</h3>
<p>All we need now is to traverse the entire syntax tree, and modify every block according to the <code class="sourceCode haskell">toBulmaHeading</code> function. This is trivial using the <code class="sourceCode haskell">Text.Pandoc.Walk.walk</code> function (also from <code>pandoc-types</code>). Thanks to typeclasses, <code class="sourceCode haskell">walk</code> works on many types, but the one specialization I’m looking for is:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">walk ::</span> (<span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span>)    <span class="co">-- ^ A function that modifies the abstract syntax three</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>     <span class="ot">-&gt;</span> <span class="dt">Pandoc</span>              <span class="co">-- ^ A syntax tree       </span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>     <span class="ot">-&gt;</span> <span class="dt">Pandoc</span>              <span class="co">-- ^ Our modified syntax tree</span></span></code></pre></div>
<p>Our filter then becomes:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- This is from the pandoc-types package</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span>   (<span class="dt">Pandoc</span>, <span class="dt">Block</span>(..), <span class="dt">Attr</span>)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Walk</span>         (walk)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ot">toBulmaHeading ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>toBulmaHeading (<span class="dt">Header</span> level attrs xs) <span class="ot">=</span> <span class="dt">Header</span> level newAttrs xs</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        (identifier, classes, keyvals) <span class="ot">=</span> attrs</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- We leave identifier and key-value pairs unchanged</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        newAttrs <span class="ot">=</span> ( identifier</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>                    <span class="co">-- We extend header classes to have the Bulma classes &quot;title&quot; and &quot;is-*&quot;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>                    <span class="co">-- where * is the header level</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>                   , classes <span class="op">&lt;&gt;</span> [<span class="st">&quot;title&quot;</span>, <span class="st">&quot;is-&quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> level]</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>                   , keyvals)</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- We leave any non-header blocks unchanged</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>toBulmaHeading x <span class="ot">=</span> x</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Pandoc filter that changes headings to play nicely with Bulma</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="ot">bulmaHeadingTransform ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>bulmaHeadingTransform <span class="ot">=</span> walk toBulmaHeading</span></code></pre></div>
<h3 class="title is-3" id="hooking-into-hakyll">Hooking into Hakyll</h3>
<p>To include this filter in my Hakyll pipeline, I only need to provide this filter to the <code class="sourceCode haskell">pandocCompilerWithTransform</code> function. Hakyll will then apply the Pandoc filter after the AST has been generated from Markdown, but before HTML rendering happens.</p>
<p>If you want to know how to integrate all of this you can shoot me an e-mail.</p>
<h2 class="title is-2" id="closing-remarks">Closing remarks</h2>
<p>I hope this example has shown you the process behind writing Pandoc filters. Without modifying the content of my posts, I have been able to integrate Bulma in my static website.</p>
<p>I could also have done it by replacing Markdown headers with inline HTML. However, this would have been less fun.</p>
<p>You can take a look at the <a href="https://github.com/LaurentRDC/personal-website">source code</a> used to generate this website.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>I’m sure there is a way to abstract those details away, but the objective today is to play with Pandoc.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>I’m using the <code class="sourceCode haskell"><span class="fu">mappend</span></code> operation <code class="sourceCode haskell"><span class="op">&lt;&gt;</span></code> to concatenate lists and strings. I could have used <code class="sourceCode haskell"><span class="op">++</span></code>, but <code class="sourceCode haskell"><span class="op">&lt;&gt;</span></code> just looks so slick.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Making a concrete coffee table</title>
    <link href="https://laurentrdc.xyz//posts/coffee-table.html" />
    <id>https://laurentrdc.xyz//posts/coffee-table.html</id>
    <published>2018-09-10T00:00:00Z</published>
    <updated>2018-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This post will go through the process of making a concrete coffee table. I had never worked with concrete before. This was a relatively simple introduction to concrete furniture.</p>
<p>The objective was to make a coffee table out of concrete, using recycled materials as much as possible. Moreover, since concrete is easily shaped, I wanted to make an asymmetric table (i.e. not a rectangle).</p>
<p>First, here’s the final result:</p>
<p><img src="/images/coffee-table/finished.jpg" class="image" /></p>
<p>Here it is ‘installed’ (on a wooden box I had lying around):</p>
<p><img src="/images/coffee-table/installed.jpg" class="image" /></p>
<h2 class="title is-2" id="making-the-mould">Making the mould</h2>
<p>Concrete tables are easiest to make using a <em>reverse cast</em> method. We made a mould from a smooth material, <strong>melamine boards</strong>, that my dad found in the trash at his job. I first brainstormed what shape I wanted, then drew the shape on the main board:</p>
<p><img src="/images/coffee-table/brainstorming.jpg" class="image" /></p>
<p>Other melamine boards were cut into strips of about 1.5 inches wide. These would later make the sides of the mould. Here is the partially-assembled mould:</p>
<p><img src="/images/coffee-table/mould-assembly-1.jpg" class="image" /></p>
<p>Note that since the table is asymmetric, some of the joints between strips are at small angles. We used a <a href="https://en.wikipedia.org/wiki/Miter_saw">Miter saw</a> to cut the end of strips. Here is an example:</p>
<p><img src="/images/coffee-table/joints.jpg" class="image" /></p>
<p>We also pre-drilled the holes with a wider drill bit so that screws would not protrude from the strips, like so:</p>
<p><img src="/images/coffee-table/pre-drilling.jpg%22" class="image" /></p>
<p>This will make it easier to level the concrete later on, as the surface of the strips will be flat.</p>
<p>Here is the assembled mould:</p>
<p><img src="/images/coffee-table/mould-assembly-2.jpg" class="image" /></p>
<p>Note that at this points, joints are not water tight; concrete would slowly leak out. Here’s an example joint:</p>
<p><img src="/images/coffee-table/not-water-tight.jpg" class="image" /></p>
<p>We need to make the mould water-tight. Caulking was used for this purpose:</p>
<p><img src="/images/coffee-table/water-tight.jpg" class="image" /></p>
<p>Here is the finished mould after cleaning:</p>
<p><img src="/images/coffee-table/mould-assembly-3.jpg" class="image" /></p>
<h2 class="title is-2" id="concrete-mix">Concrete mix</h2>
<p>I used two 80 lbs (~36 kg) bags of concrete mix. The idea was to mix all the concrete, then separate it in two batches : one left as-is, and the other batch colored with charcoal pigments. Then, recombine the two halves, without mixing too much, to create a marbled look.</p>
<p>I mixed the concrete by hand(-held mixer) in this wheelbarrow:</p>
<p><img src="/images/coffee-table/wheelbarrow.jpg" class="image" /></p>
<p>Charcoal pigments mixed in water are waiting in a separate container:</p>
<p><img src="/images/coffee-table/pigments-bucket.jpg" class="image" /></p>
<p>Unfortunately I have no pictures showing the process before I recombined the two concrete halves. Here is the final mix. You can also see the tool I used to mix the concrete (handheld drill + concrete mixing attachment):</p>
<p><img src="/images/coffee-table/concrete-mixed.jpg" class="image" /></p>
<p>Note that while the mix seems uniform, I mixed the final concrete <em>very little</em>. At this point I thought I failed to do the marbling; as you will see, it actually worked. Also the mix looks brown; the color will change during hardening.</p>
<h2 class="title is-2" id="moulding">Moulding</h2>
<p>Here is the filled mould:</p>
<p><img src="/images/coffee-table/filled-mould.jpg" class="image" /></p>
<p>I have no pictures of this, but we added some metal rebar to help with structural integrity.</p>
<p>We leveled the surface with another melamine strip. This is why we pre-drilled the holes, so that the entire mould + concrete assembly lays perfectly flat.</p>
<p>At this point, we needed to remove the air bubbles trapped in the concrete. This was done by hammering the underside of the mould with a rubber mallet for about an hour. Bubbles appeared at the surface like so:</p>
<p><img src="/images/coffee-table/air-bubbles.jpg" class="image" /></p>
<p>To help the concrete harden more uniformly, I ‘sealed’ the mould using plastic bags:</p>
<p><img src="/images/coffee-table/sealed-mould.jpg" class="image" /></p>
<p>Every few days, I would remove the plastic layer and spray water on the concrete surface.</p>
<h2 class="title is-2" id="initial-hardening">Initial hardening</h2>
<p>After a week, the concrete is hard enough to partially de-mould. Here is the hardened surface (which will end up being the bottom of the table):</p>
<p><img src="/images/coffee-table/demould.jpg" class="image" /></p>
<p>At least this is confirmation that the table is not <em>brown</em>. We flipped the table to expose the top surface. It’s difficult to see on this image, but the surface looks like it might be marbled:</p>
<p><img src="/images/coffee-table/raw-surface.jpg" class="image" /></p>
<h2 class="title is-2" id="polishing-and-finish">Polishing and Finish</h2>
<p>After about two weeks, I polished the surface (200-grit) to reveal the marbling.</p>
<p><em>Before</em>:</p>
<p><img src="/images/coffee-table/before-polishing.jpg" class="image" /></p>
<p><em>After</em>:</p>
<p><img src="/images/coffee-table/after-polishing.jpg" class="image" /></p>
<p>Looking closely, we can see air bubbles:</p>
<p><img src="/images/coffee-table/surface-holes.jpg" class="image" /></p>
<p>Note that if I was making a kitchen counter, I would want to get rid of the holes in the surface (for sanitary reasons); in my case I thought it was not important. However, I still tried to fill in some of the larger holes using a more liquid concrete mix:</p>
<p><img src="/images/coffee-table/filling-holes.jpg" class="image" /></p>
<p>After 24h, I polished the surface and sides again, with a smaller grit (400-grit):</p>
<p><img src="/images/coffee-table/before-coating.jpg" class="image" /></p>
<p>Finally, to protect the surface and make the marbling more visible, I coated the table with some wood varnish I found lying around at my parents’. I only have a picture of coating the underside of the table:</p>
<p><img src="/images/coffee-table/underside-coating.jpg" class="image" /></p>
<p>Transport from my parents’ garage to my apartment:</p>
<p><img src="/images/coffee-table/in-transport.jpg" class="image" /></p>
<p>Final coat of varnish at home:</p>
<p><img src="/images/coffee-table/after-coating.jpg" class="image" /></p>
<h2 class="title is-2" id="closing-comments">Closing comments</h2>
<p>The final cost was about 85 $CAD dollars:</p>
<ul>
<li><p>50 $CAD for two bags of concrete and metal reinforcements;</p></li>
<li><p>35 $CAD for iron oxide pigments (5kg);</p></li>
<li><p>free melamine picked up from trash;</p></li>
<li><p>free leftover varnish;</p></li>
<li><p>free man-hours over the course of a few months.</p></li>
</ul>]]></summary>
</entry>
<entry>
    <title>How this website is generated</title>
    <link href="https://laurentrdc.xyz//posts/making-this-website.html" />
    <id>https://laurentrdc.xyz//posts/making-this-website.html</id>
    <published>2018-08-02T00:00:00Z</published>
    <updated>2018-09-12</updated>
    <summary type="html"><![CDATA[<p>In the hope that this page is useful to someone, I would like to explain how I generate this website.</p>
<h2 class="title is-2" id="static-website-generator">Static website generator</h2>
<p>I am always looking for an excuse to play with Haskell, and so this website is generated using <a href="https://jaspervdj.be/hakyll/index.html">Hakyll</a>. Hakyll is a static website generator; website configuration is written in Haskell and content is written in Markdown. Hakyll then collects the content, applies templates to it (navigation bar, page footers, etc), and builds a static website in a separate folder. Deploying the website then simply consists in moving the files to the right place.</p>
<p>I use <a href="https://docs.haskellstack.org/en/stable/README/"><code>stack</code></a> to manage the project. <code>stack</code> even has a Hakyll template (<code>hakyll-template</code>).</p>
<p>My <code>site.hs</code> configuration file is fairly standard, but I want to mention two modifications I have made that might help you as well.</p>
<h3 class="title is-3" id="math-display-and-syntax-highlighting">Math display and syntax highlighting</h3>
<p>This idea is borrowed from <a href="https://github.com/jdreaver/jdreaver.com/">JD Reaver</a></p>
<p>By default, LaTeX-style math is not rendered properly when posts are consumed by Hakyll. We need to provide <code>pandoc</code> - the library that performs the Markdown-to-HTML translation - with a list of extensions to use.</p>
<p>The same problem arises when trying to highlight code. Instead of using the default <code>pandocCompiler</code>, I use a slightly modified compiler that passes extra options to <code>pandoc</code>.</p>
<p>The type signature of our new compiler <code>pandocCompiler_</code> is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pandocCompiler_ ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>Exactly the same signature as <code>pandocCompiler</code>, what did you expect? The first step is to collect the relevant <a href="http://hackage.haskell.org/package/pandoc-2.2.2.1/docs/Text-Pandoc-Extensions.html">Pandoc extensions</a>, which I have separated for clarity:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>pandocCompiler_ <span class="ot">=</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    mathExtensions <span class="ot">=</span> </span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        [ <span class="dt">Ext_tex_math_dollars</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_tex_math_double_backslash</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_latex_macros</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    codeExtensions <span class="ot">=</span> </span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        [ <span class="dt">Ext_fenced_code_blocks</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_backtick_code_blocks</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_fenced_code_attributes</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        ]</span></code></pre></div>
<p>The math extensions allows me to write LaTeX code inclusing macros like <code>\begin{align} ... \end{align}</code>. The code extensions allow me to easily switch languages for code blocks.</p>
<p>I then collect all the extensions:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>newExtensions <span class="ot">=</span> <span class="fu">foldr</span> enableExtension defaultExtensions (mathExtensions <span class="op">&lt;&gt;</span> codeExtensions)</span></code></pre></div>
<p>Note the use of the <code>mappend</code> function (<code>&lt;&gt;</code>), which could be replaces with list concatenation <code>++</code>. We modify the Pandoc write options to include these extensions:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>defaultExtensions <span class="ot">=</span> writerExtensions defaultHakyllWriterOptions</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>writerOptions <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    defaultHakyllWriterOptions</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    { writerExtensions <span class="ot">=</span> newExtensions</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    , writerHTMLMathMethod <span class="ot">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    , writerHighlightStyle <span class="ot">=</span> <span class="dt">Just</span> syntaxHighlightingStyle</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    }</span></code></pre></div>
<p>(Ignore the line <code>writerHighlightStyle = Just syntaxHighlightingStyle</code> for now, this is related to syntax highlighting.) Finally, we create a new compiler that takes those write options into account:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>pandocCompilerWith defaultHakyllReaderOptions writerOptions</span></code></pre></div>
<p>The full code for this math-and-code compiler is below:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pandocCompiler_ ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>pandocCompiler_ <span class="ot">=</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    mathExtensions <span class="ot">=</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        [ <span class="dt">Ext_tex_math_dollars</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_tex_math_double_backslash</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_latex_macros</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    codeExtensions <span class="ot">=</span> </span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        [ <span class="dt">Ext_fenced_code_blocks</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_backtick_code_blocks</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        , <span class="dt">Ext_fenced_code_attributes</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    newExtensions <span class="ot">=</span> <span class="fu">foldr</span> enableExtension defaultExtensions (mathExtensions <span class="op">&lt;&gt;</span> codeExtensions)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>    defaultExtensions <span class="ot">=</span> writerExtensions defaultHakyllWriterOptions</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>    writerOptions <span class="ot">=</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>        defaultHakyllWriterOptions</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        { writerExtensions <span class="ot">=</span> newExtensions</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>        , writerHTMLMathMethod <span class="ot">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        , writerHighlightStyle <span class="ot">=</span> <span class="dt">Just</span> syntaxHighlightingStyle</span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> pandocCompilerWith defaultHakyllReaderOptions writerOptions</span></code></pre></div>
<p>All <code>pandocCompiler</code> function calls are replaced with <code>pandocCompiler_</code></p>
<h3 class="title is-3" id="syntax-highlighting-style-as-css">Syntax highlighting style as CSS</h3>
<p>Pandoc comes with <a href="http://hackage.haskell.org/package/pandoc-2.2.2.1/docs/Text-Pandoc-Highlighting.html">eight syntax highlighting styles</a>:</p>
<ul>
<li>pygments</li>
<li>espresso</li>
<li>zenburn</li>
<li>tango</li>
<li>kate</li>
<li>monochrome</li>
<li>breezeDark</li>
<li>haddock</li>
</ul>
<p>For some reason, there was no difference between the different highlighting styles when generating my website. Therefore, I wanted to generate a CSS file for the style I want to use.</p>
<p>First, I pinned the style I want to use:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">syntaxHighlightingStyle ::</span> <span class="dt">Style</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>syntaxHighlightingStyle <span class="ot">=</span> haddock</span></code></pre></div>
<p>You will recognize the use of this in the above <code>pandocCompiler_</code>. Next, I want to generate CSS for this style with Pandoc and place it with all other CSS files for this website:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">generateSyntaxHighlightingCSS ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>generateSyntaxHighlightingCSS <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> css <span class="ot">=</span> styleToCss syntaxHighlightingStyle</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">writeFile</span> <span class="st">&quot;css/syntax.css&quot;</span> css</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> ()</span></code></pre></div>
<p>The <code>syntax.css</code> file must be included in the HTML template:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;link</span> <span class="er">rel</span><span class="ot">=</span><span class="st">&quot;stylesheet&quot;</span> <span class="er">type</span><span class="ot">=</span><span class="st">&quot;text/css&quot;</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/css/syntax.css&quot;</span> <span class="kw">/&gt;</span></span></code></pre></div>
<p>Finally, before Hakyll does anything, I generate this styling file:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    generateSyntaxHighlightingCSS</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    hakyll <span class="op">$</span> <span class="kw">do</span> <span class="op">...</span></span></code></pre></div>
<p>This way, changing the highlighting style is a simple matter of modifying <code>syntaxHighlightingStyle</code>. In the future, I will want to define my own <code>Style</code> (monokai).</p>
<h2 class="title is-2" id="update-2018-08-05-generating-the-html-templates-using-blaze">Update 2018-08-05 : Generating the HTML templates using Blaze</h2>
<p>Hakyll uses HTML templating to enforce consistent styling for all pages of this website. Handwriting HTML is error-prone; therefore, this website uses an HTML template generated using <a href="https://hackage.haskell.org/package/blaze-html"><code>blaze-html</code></a>.</p>
<p><code>blaze-html</code> is a domain-specific language - a library of Haskell functions that mimic HTML. For example, the following <code>blaze-html</code> code:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Blaze.Html5</span> <span class="kw">as</span> <span class="dt">H</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ot">defaultMain ::</span> <span class="dt">H.Html</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>defaultMain <span class="ot">=</span> H.main <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    H.h1 <span class="st">&quot;$title$&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;$body$&quot;</span></span></code></pre></div>
<p>will render to the following HTML:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;main&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;h1&gt;</span>$title$<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    $body$</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/main&gt;</span></span></code></pre></div>
<p>Note that in this case, <code>$title$</code> and <code>$body$</code> are placeholders that will be replaced with page content, like a blog post title and text. I generate the HTML template before Hakyll goes to work:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Generate the CSS required to to syntax highlighting</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> css <span class="ot">=</span> styleToCss syntaxHighlightingStyle</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">writeFile</span> <span class="st">&quot;css/syntax.css&quot;</span> css</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Generate the default HTML template</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> template <span class="ot">=</span> renderHtml mkDefaultTemplate</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    B.writeFile <span class="st">&quot;templates/default.html&quot;</span> template</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    hakyll <span class="op">$</span> <span class="kw">do</span> <span class="op">...</span></span></code></pre></div>
<h2 class="title is-2" id="update-2018-09-12-using-a-pandoc-filter-to-abstract-away-bulma-quirks">Update 2018-09-12 : using a Pandoc filter to abstract away Bulma quirks</h2>
<p>I recently upgraded the website to use the <a href="https://bulma.io">Bulma CSS Framework</a>. There are interesting quirks, like the requirement to have all heading be of a certain class:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-1 title --&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-1&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-2 title --&gt;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h2</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;title is-2&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h2&gt;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- Level-1 subtitle --&gt;</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;subtitle is-1&quot;</span><span class="kw">&gt;</span>Title<span class="kw">&lt;/h1&gt;</span></span></code></pre></div>
<p>To modifying headings generated by Pandoc <em>a posteriori</em>, I wrote a Pandoc filter. <strong>The process is documented <a href="/posts/bulma-pandoc-filter.html">in this post</a></strong>.</p>]]></summary>
</entry>
<entry>
    <title>Genesis</title>
    <link href="https://laurentrdc.xyz//posts/genesis.html" />
    <id>https://laurentrdc.xyz//posts/genesis.html</id>
    <published>2018-08-01T00:00:00Z</published>
    <updated>2018-08-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is the first post of my blog, where I can test new features.</p>
<hr />
<h3 class="title is-3" id="math">Math</h3>
<p>Math display works:</p>
<p><span class="math display">\[ 
\begin{align}
    \nabla \cdot \textbf{E} &amp;= \frac{\rho}{\epsilon_0} \\
    \nabla \cdot \textbf{B} &amp;= 0 \\
    \nabla \times \textbf{E} &amp;= -\frac{\partial \textbf{B}}{\partial t} \\
    \nabla \times \textbf{B} &amp;= \mu_0 \left( \textbf{J} + \epsilon_0 \frac{\partial \textbf{E}}{\partial t} \right) \\
    \frac{\partial \rho}{\partial t} + \nabla \cdot \textbf{J} &amp;= 0
\end{align}
\]</span></p>
<hr />
<h3 class="title is-3" id="code">Code</h3>
<p>Code blocks also work, including syntax highlighting:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Haskell</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Python</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fib(n):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    i, j <span class="op">=</span> <span class="dv">0</span>, <span class="dv">1</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(n):</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">yield</span> i</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        i, j <span class="op">=</span> j, i <span class="op">+</span> j</span></code></pre></div>
<hr />
<h3 class="title is-3" id="images">Images</h3>
<figure>
<img src="/images/Laurent.jpg" class="image" alt="Caption: this is me" /><figcaption aria-hidden="true">Caption: this is me</figcaption>
</figure>
<hr />
<h3 class="title is-3" id="quotes">Quotes</h3>
<blockquote>
<p>The number of bins (of size 1) is one larger than the largest value in x. If minlength is specified, there will be at least this number of bins in the output array (though it will be longer if necessary, depending on the contents of x).</p>
</blockquote>
<ul>
<li><em>NumPy documentation for bincount</em></li>
</ul>]]></summary>
</entry>

</feed>
